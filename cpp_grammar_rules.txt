PROGRAM                -> GLOBAL_DECLARATION PROGRAM | ε

GLOBAL_DECLARATION     -> DECLARATION | FUNCTION_DEFINITION

DECLARATION            -> TYPE IDENTIFIER VARIABLE_INITIALIZER ";"
VARIABLE_INITIALIZER   -> "=" EXPRESSION | ε

FUNCTION_DEFINITION    -> TYPE IDENTIFIER "(" PARAMETER_LIST ")" COMPOUND_STATEMENT
TYPE                   -> "int" | "float" | "char" | "double" | "bool" | "void"

PARAMETER_LIST         -> PARAMETER PARAMETER_TAIL | ε
PARAMETER              -> TYPE IDENTIFIER
PARAMETER_TAIL         -> "," PARAMETER PARAMETER_TAIL | ε

COMPOUND_STATEMENT     -> "{" STATEMENT_LIST "}"
STATEMENT_LIST         -> STATEMENT STATEMENT_LIST | ε

STATEMENT              -> EXPRESSION_STATEMENT
                        | COMPOUND_STATEMENT
                        | SELECTION_STATEMENT
                        | ITERATION_STATEMENT
                        | JUMP_STATEMENT

EXPRESSION_STATEMENT   -> EXPRESSION ";"

SELECTION_STATEMENT    -> "if" "(" EXPRESSION ")" STATEMENT OPTIONAL_ELSE
OPTIONAL_ELSE          -> "else" STATEMENT | ε

ITERATION_STATEMENT    -> "while" "(" EXPRESSION ")" STATEMENT
                        | "for" "(" EXPRESSION_STATEMENT EXPRESSION_STATEMENT EXPRESSION ")" STATEMENT

JUMP_STATEMENT         -> "return" EXPRESSION ";"

EXPRESSION             -> ASSIGNMENT_EXPRESSION
ASSIGNMENT_EXPRESSION  -> LOGICAL_OR_EXPRESSION ASSIGNMENT_OPERATOR ASSIGNMENT_EXPRESSION
                        | LOGICAL_OR_EXPRESSION

ASSIGNMENT_OPERATOR    -> "=" | "+=" | "-=" | "*=" | "/="

LOGICAL_OR_EXPRESSION  -> LOGICAL_AND_EXPRESSION LOGICAL_OR_TAIL
LOGICAL_OR_TAIL        -> "||" LOGICAL_AND_EXPRESSION LOGICAL_OR_TAIL | ε

LOGICAL_AND_EXPRESSION -> EQUALITY_EXPRESSION LOGICAL_AND_TAIL
LOGICAL_AND_TAIL       -> "&&" EQUALITY_EXPRESSION LOGICAL_AND_TAIL | ε

EQUALITY_EXPRESSION    -> RELATIONAL_EXPRESSION EQUALITY_TAIL
EQUALITY_TAIL          -> "==" RELATIONAL_EXPRESSION | "!=" RELATIONAL_EXPRESSION | ε

RELATIONAL_EXPRESSION  -> ADDITIVE_EXPRESSION RELATIONAL_TAIL
RELATIONAL_TAIL        -> "<" ADDITIVE_EXPRESSION | ">" ADDITIVE_EXPRESSION 
                        | "<=" ADDITIVE_EXPRESSION | ">=" ADDITIVE_EXPRESSION | ε

ADDITIVE_EXPRESSION    -> MULTIPLICATIVE_EXPRESSION ADDITIVE_TAIL
ADDITIVE_TAIL          -> "+" MULTIPLICATIVE_EXPRESSION ADDITIVE_TAIL 
                        | "-" MULTIPLICATIVE_EXPRESSION ADDITIVE_TAIL | ε

MULTIPLICATIVE_EXPRESSION -> UNARY_EXPRESSION MULTIPLICATIVE_TAIL
MULTIPLICATIVE_TAIL    -> "*" UNARY_EXPRESSION MULTIPLICATIVE_TAIL 
                        | "/" UNARY_EXPRESSION MULTIPLICATIVE_TAIL | ε

UNARY_EXPRESSION       -> PRIMARY_EXPRESSION | "!" UNARY_EXPRESSION | "-" UNARY_EXPRESSION

PRIMARY_EXPRESSION     -> IDENTIFIER | LITERAL | "(" EXPRESSION ")"

IDENTIFIER             -> LETTER (LETTER | DIGIT)*

LITERAL                -> INTEGER_LITERAL | FLOATING_LITERAL | CHARACTER_LITERAL 
                        | STRING_LITERAL | BOOLEAN_LITERAL

INTEGER_LITERAL        -> DIGIT+
FLOATING_LITERAL       -> DIGIT* "." DIGIT+ ([eE] [+-]? DIGIT+)?
CHARACTER_LITERAL      -> "'" CHARACTER "'"
STRING_LITERAL         -> '"' CHARACTER* '"'
BOOLEAN_LITERAL        -> "true" | "false"

ASSIGNMENT_OPERATOR    -> "=" | "+=" | "-=" | "*=" | "/="
RELATIONAL_OPERATOR    -> "==" | "!=" | "<" | ">" | "<=" | ">="
LOGICAL_OPERATOR       -> "&&" | "||" | "!"
ADDITIVE_OPERATOR      -> "+" | "-"
MULTIPLICATIVE_OPERATOR -> "*" | "/"
DELIMITER              -> ";" | "," | "(" | ")" | "{" | "}"

